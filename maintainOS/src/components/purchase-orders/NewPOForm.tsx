import { Calendar, DollarSign, Paperclip, Plus, Trash2 } from "lucide-react";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { formatMoney } from "./helpers";
import { mockVendors, type NewPOFormProps, type Vendor } from "./po.types"; // <-- Assuming Vendor type exists
import { useState } from "react";
import { vendorService } from "../../store/vendors";

// --- HELPER: Simulate an API call ---
// In your real app, this function would use fetch() or axios to get data from your backend.
const getVendorsFromApi = (): Promise<Vendor[]> => {
  console.log("Fetching vendors from API...");
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(mockVendors); // Resolving with your mock data for this example
    }, 1200); // Simulate a 1.2-second network delay
  });
};

export function NewPOForm(props: NewPOFormProps) {
  const {
    newPO,
    setNewPO,
    newPOSubtotal,
    newPOTotal,
    addNewPOItemRow,
    removePOItemRow,
    updateItemField,
    createPurchaseOrder,
    onCancel,
  } = props;

  // --- NEW STATE for managing vendors ---
  const [showCustomPoInput, setShowCustomPoInput] = useState(false);
  const [vendors, setVendors] = useState<Vendor[]>([]);
  const [isLoadingVendors, setIsLoadingVendors] = useState(false);
  const [hasFetchedVendors, setHasFetchedVendors] = useState(false);
  const [vendorSearchQuery, setVendorSearchQuery] = useState("");
  const [isVendorSearchFocused, setIsVendorSearchFocused] = useState(false);

  // --- NEW FUNCTION for fetching vendors ---
  const fetchVendors = async () => {
    setIsLoadingVendors(true);
    try {
      const vendorData = await vendorService.fetchVendorName();
      setVendors(vendorData);
    } catch (error) {
      console.error("Failed to fetch vendors:", error);
      // Optionally, set an error state here to show in the UI
    } finally {
      setIsLoadingVendors(false);
      setHasFetchedVendors(true); // Mark as fetched to prevent re-fetching
    }
  };

  // --- NEW HANDLER for the Select component ---
  const handleVendorDropdownOpen = (isOpen: boolean) => {
    // If the dropdown is being opened and we have NOT fetched vendors yet...
    if (isOpen && !hasFetchedVendors) {
      fetchVendors();
    }
  };

  const handleUseAutoPo = () => {
    setShowCustomPoInput(false);
    setNewPO((s) => ({ ...s, poNumber: "" }));
  };

  const handleUseCustomPo = () => {
    setShowCustomPoInput(true);
  };

  return (
    <div className="flex-1 min-h-0 overflow-y-auto">
      <div>
        <div className="mx-auto w-full max-w-[820px] p-6 space-y-10">
          <section>
            <div className="text-base font-medium mb-4">
              Purchase Order Number
            </div>
            {showCustomPoInput ? (
              <div>
                <Input
                  type="text"
                  value={newPO.poNumber || ""}
                  onChange={(e) =>
                    setNewPO((s) => ({ ...s, poNumber: e.target.value }))
                  }
                  placeholder="Enter Purchase Order Number"
                  className="h-9 text-sm"
                />
                <div className="mt-2 text-sm text-muted-foreground">
                  or{" "}
                  <button
                    onClick={handleUseAutoPo}
                    className="text-orange-600 hover:underline focus:outline-none"
                  >
                    Use Autogenerated PO Number
                  </button>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-between text-sm p-3 border rounded-lg bg-muted/30">
                <span className="text-muted-foreground">
                  PO Number will be generated automatically.
                </span>
                <Button
                  variant="link"
                  className="text-orange-600 h-auto p-0"
                  onClick={handleUseCustomPo}
                >
                  Enter Custom PO Number
                </Button>
              </div>
            )}
          </section>

          {/* Vendor Section */}
          <section>
            <div className="text-base font-medium mb-4">Vendor</div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                {/* This logic will show the selected vendor OR the search input */}
                {newPO.vendorId &&
                vendors.find((v) => v.id === newPO.vendorId) ? (
                  // --- A) VIEW WHEN VENDOR IS SELECTED ---
                  <div className="flex items-center justify-between h-9 px-3 py-2 text-sm border rounded-md bg-muted/50">
                    <span>
                      {vendors.find((v) => v.id === newPO.vendorId)?.name}
                    </span>
                    <Button
                      variant="ghost"
                      className="h-auto p-1 text-orange-600 hover:text-orange-700"
                      onClick={() => {
                        setNewPO((s) => ({ ...s, vendorId: "" }));
                        setVendorSearchQuery(""); // Reset search text
                      }}
                    >
                      Change
                    </Button>
                  </div>
                ) : (
                  // --- B) VIEW FOR SEARCHING A VENDOR ---
                  <div className="relative">
                    <Input
                      placeholder="Search and select a vendor..."
                      className="h-9 text-sm bg-white border-orange-600"
                      value={vendorSearchQuery}
                      onFocus={() => {
                        setIsVendorSearchFocused(true);
                        handleVendorDropdownOpen(true); // Re-use your existing fetch logic
                      }}
                      onBlur={() => {
                        // Delay hiding to allow click event on list to fire
                        setTimeout(() => setIsVendorSearchFocused(false), 150);
                      }}
                      onChange={(e) => setVendorSearchQuery(e.target.value)}
                    />

                    {/* --- Search Results List --- */}
                    {isVendorSearchFocused && (
                      <div className="absolute z-10 w-full mt-1 bg-background border rounded-md shadow-lg max-h-60 overflow-y-auto">
                        {isLoadingVendors ? (
                          <div className="p-2 text-sm text-muted-foreground">
                            Loading...
                          </div>
                        ) : (
                          vendors
                            .filter((v) =>
                              v.name
                                .toLowerCase()
                                .includes(vendorSearchQuery.toLowerCase())
                            )
                            .map((v) => (
                              <div
                                key={v.id}
                                className="p-2 text-sm hover:bg-muted cursor-pointer"
                                onClick={() => {
                                  setNewPO((s) => ({ ...s, vendorId: v.id }));
                                  setVendorSearchQuery(v.name);
                                  setIsVendorSearchFocused(false);
                                }}
                              >
                                {v.name}
                              </div>
                            ))
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Order Items Table and other sections remain the same... */}
            <div className="text-base font-medium mb-3">Order Items</div>
            <div className="overflow-x-auto border rounded-lg">
              <table className="w-full text-sm table-fixed">
                <thead className="bg-muted/50">
                  <tr className="text-left">
                    <th className="p-3 w-[38%]">Item Name</th>
                    <th className="p-3 w-[20%]">Part Number</th>
                    <th className="p-3 w-[14%]">Units Ordered</th>
                    <th className="p-3 w-[14%]">Unit Cost</th>
                    <th className="p-3 w-[14%]">Price</th>
                    <th className="p-3"></th>
                  </tr>
                </thead>
                <tbody>
                  {newPO.items.map((it) => {
                    const price =
                      (Number(it.quantity) || 0) * (Number(it.unitCost) || 0);
                    return (
                      <tr key={it.id} className="border-t">
                        <td className="p-3">
                          <Input
                            className="h-9 text-sm bg-white border-orange-600"
                            placeholder="Start typingâ€¦"
                            value={it.itemName}
                            onChange={(e) =>
                              updateItemField(it.id, "itemName", e.target.value)
                            }
                          />
                        </td>
                        <td className="p-3">
                          <Input
                            className="h-9 text-sm bg-white border-orange-600"
                            placeholder="e.g. #12345"
                            value={it.partNumber ?? ""}
                            onChange={(e) =>
                              updateItemField(
                                it.id,
                                "partNumber",
                                e.target.value
                              )
                            }
                          />
                        </td>
                        <td className="p-3">
                          <Input
                            className="h-9 text-sm bg-white border-orange-600"
                            type="number"
                            min={0}
                            value={it.quantity}
                            onChange={(e) =>
                              updateItemField(
                                it.id,
                                "quantity",
                                Number(e.target.value)
                              )
                            }
                          />
                        </td>
                        <td className="p-3">
                          <div className="flex items-center">
                            <span className="text-muted-foreground mr-1">
                              $
                            </span>
                            <Input
                              className="h-9 text-sm bg-white border-orange-600"
                              type="number"
                              min={0}
                              step="0.01"
                              value={it.unitCost}
                              onChange={(e) =>
                                updateItemField(
                                  it.id,
                                  "unitCost",
                                  Number(e.target.value)
                                )
                              }
                            />
                          </div>
                        </td>
                        <td className="p-3">
                          <Input className="bg-white border-orange-600 text-right" value={formatMoney(price)} />
                        </td>
                        <td className="p-3">
                          {newPO.items.length > 1 && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => removePOItemRow(it.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          )}
                        </td>
                      </tr>
                    );
                  })}
                  <tr className="border-t">
                    <td colSpan={6}>
                      <div className="flex items-center justify-between p-3">
                        <Button
                          variant="link"
                          className="gap-2"
                          onClick={addNewPOItemRow}
                        >
                          <Plus className="h-4 w-4" /> Add Item
                        </Button>
                        <div className="text-sm mr-2">
                          <span className="text-muted-foreground mr-2">
                            Subtotal
                          </span>
                          <span className="font-medium">
                            {formatMoney(newPOSubtotal)}
                          </span>
                        </div>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>

            <div className="flex items-center justify-end gap-6 mt-4">
              <button
                className="text-sm text-orange-600"
                onClick={() =>
                  setNewPO((s) => ({
                    ...s,
                    extraCosts: Number(s.extraCosts) || 0,
                  }))
                }
              >
                + Add Taxes &amp; Costs
              </button>
              <div className="flex items-center gap-2">
                <DollarSign className="h-4 w-4 text-muted-foreground" />
                <Input
                  className="h-9 text-sm w-28 bg-white border-orange-600"
                  type="number"
                  min={0}
                  step="0.01"
                  value={newPO.extraCosts}
                  onChange={(e) =>
                    setNewPO((s) => ({
                      ...s,
                      extraCosts: Number(e.target.value) || 0,
                    }))
                  }
                  placeholder="0.00"
                />
              </div>
              <div className="text-sm">
                <span className="text-muted-foreground mr-2">Total</span>
                <span className="font-semibold">{formatMoney(newPOTotal)}</span>
              </div>
            </div>
          </section>

          {/* Shipping Information */}
          <section>
            <div className="text-base font-medium mb-4">
              Shipping Information
            </div>
            <div className="grid grid-cols-1 gap-4 mb-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="Contact name"
                  value={newPO.contactName}
                  onChange={(e) =>
                    setNewPO((s) => ({ ...s, contactName: e.target.value }))
                  }
                />
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="Email or Phone Number"
                  value={newPO.contactEmailOrPhone}
                  onChange={(e) =>
                    setNewPO((s) => ({
                      ...s,
                      contactEmailOrPhone: e.target.value,
                    }))
                  }
                />
              </div>

              <Input
                className="h-9 text-sm bg-white border-orange-600"
                placeholder="Shipping Address"
                value={newPO.shippingAddress.line1}
                onChange={(e) =>
                  setNewPO((s) => ({
                    ...s,
                    shippingAddress: {
                      ...s.shippingAddress,
                      line1: e.target.value,
                    },
                    ...(s.sameShipBill
                      ? {
                          billingAddress: {
                            ...s.billingAddress,
                            line1: e.target.value,
                          },
                        }
                      : {}),
                  }))
                }
              />
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="City"
                  value={newPO.shippingAddress.city}
                  onChange={(e) =>
                    setNewPO((s) => ({
                      ...s,
                      shippingAddress: {
                        ...s.shippingAddress,
                        city: e.target.value,
                      },
                      ...(s.sameShipBill
                        ? {
                            billingAddress: {
                              ...s.billingAddress,
                              city: e.target.value,
                            },
                          }
                        : {}),
                    }))
                  }
                />
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="State"
                  value={newPO.shippingAddress.state}
                  onChange={(e) =>
                    setNewPO((s) => ({
                      ...s,
                      shippingAddress: {
                        ...s.shippingAddress,
                        state: e.target.value,
                      },
                      ...(s.sameShipBill
                        ? {
                            billingAddress: {
                              ...s.billingAddress,
                              state: e.target.value,
                            },
                          }
                        : {}),
                    }))
                  }
                />
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="PIN"
                  value={newPO.shippingAddress.postalCode}
                  onChange={(e) =>
                    setNewPO((s) => ({
                      ...s,
                      shippingAddress: {
                        ...s.shippingAddress,
                        postalCode: e.target.value,
                      },
                      ...(s.sameShipBill
                        ? {
                            billingAddress: {
                              ...s.billingAddress,
                              postalCode: e.target.value,
                            },
                          }
                        : {}),
                    }))
                  }
                />
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="Country"
                  value={newPO.shippingAddress.country}
                  onChange={(e) =>
                    setNewPO((s) => ({
                      ...s,
                      shippingAddress: {
                        ...s.shippingAddress,
                        country: e.target.value,
                      },
                      ...(s.sameShipBill
                        ? {
                            billingAddress: {
                              ...s.billingAddress,
                              country: e.target.value,
                            },
                          }
                        : {}),
                    }))
                  }
                />
              </div>

              <label className="flex items-center gap-2 text-sm select-none">
                <input
                  type="checkbox"
                  checked={newPO.sameShipBill}
                  className="bg-white border-orange-600"
                  onChange={(e) =>
                    setNewPO((s) => ({ ...s, sameShipBill: e.target.checked }))
                  }
                />
                Use the same Shipping and Billing Address
              </label>

              {!newPO.sameShipBill && (
                <>
                  <Input
                    className="h-9 text-sm bg-white border-orange-600"
                    placeholder="Billing Address"
                    value={newPO.billingAddress.line1}
                    onChange={(e) =>
                      setNewPO((s) => ({
                        ...s,
                        billingAddress: {
                          ...s.billingAddress,
                          line1: e.target.value,
                        },
                      }))
                    }
                  />
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    <Input
                      className="h-9 text-sm bg-white border-orange-600"
                      placeholder="City"
                      value={newPO.billingAddress.city}
                      onChange={(e) =>
                        setNewPO((s) => ({
                          ...s,
                          billingAddress: {
                            ...s.billingAddress,
                            city: e.target.value,
                          },
                        }))
                      }
                    />
                    <Input
                      className="h-9 text-sm bg-white border-orange-600"
                      placeholder="State"
                      value={newPO.billingAddress.state}
                      onChange={(e) =>
                        setNewPO((s) => ({
                          ...s,
                          billingAddress: {
                            ...s.billingAddress,
                            state: e.target.value,
                          },
                        }))
                      }
                    />
                    <Input
                      className="h-9 text-sm bg-white border-orange-600"
                      placeholder="PIN"
                      value={newPO.billingAddress.postalCode}
                      onChange={(e) =>
                        setNewPO((s) => ({
                          ...s,
                          billingAddress: {
                            ...s.billingAddress,
                            postalCode: e.target.value,
                          },
                        }))
                      }
                    />
                    <Input
                      className="h-9 text-sm bg-white border-orange-600"
                      placeholder="Country"
                      value={newPO.billingAddress.country}
                      onChange={(e) =>
                        setNewPO((s) => ({
                          ...s,
                          billingAddress: {
                            ...s.billingAddress,
                            country: e.target.value,
                          },
                        }))
                      }
                    />
                  </div>
                </>
              )}
            </div>
          </section>

          {/* Details */}
          <section>
            <div className="text-base font-medium mb-4">Details</div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <div className="relative">
                <Calendar className="h-4 w-4 text-muted-foreground absolute left-3 top-1/2 -translate-y-1/2" />
                <Input
                  className="pl-9 h-9 text-sm bg-white border-orange-600"
                  type="date"
                  value={newPO.dueDate}
                  onChange={(e) =>
                    setNewPO((s) => ({ ...s, dueDate: e.target.value }))
                  }
                />
              </div>
              <div className="md:col-span-2">
                <Input
                  className="h-9 text-sm bg-white border-orange-600"
                  placeholder="Add notes"
                  value={newPO.notes}
                  onChange={(e) =>
                    setNewPO((s) => ({ ...s, notes: e.target.value }))
                  }
                />
              </div>
            </div>

            <div className="mt-4">
              <Button className="gap-2 h-9 text-orange-600">
                <Paperclip className="h-4 w-4" />
                Attach files
              </Button>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}
