generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  manager
  technician
  viewer

  @@map("user_role")
}

enum IndustryType {
  manufacturing
  real_estate
  healthcare
  hospitality
  education
  other

  @@map("industry_type")
}

enum AssetCriticality {
  high
  medium
  low

  @@map("asset_criticality")
}

enum MeterType {
  electricity
  water
  gas
  runtime

  @@map("meter_type")
}

enum PurchaseOrderStatus {
  draft
  pending_approval
  approved
  rejected
  ordered
  completed
  cancelled

  @@map("po_status")
}

enum ProcedureType {
  maintenance
  inspection
  safety_check

  @@map("procedure_type")
}

enum ProcedureFrequency {
  daily
  weekly
  monthly
  quarterly
  yearly

  @@map("procedure_frequency")
}

enum WorkOrderPriority {
  urgent
  high
  medium
  low

  @@map("work_order_priority")
}

enum CategoryIcon {
  wrench
  bolt
  gear
  electric
  plumbing
  hvac

  @@map("category_icon")
}

model Organization {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String        @db.VarChar(255)
  industry  IndustryType?
  size      Int?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  users          User[]
  teams          Team[]
  vendors        Vendor[]
  locations      Location[]
  parts          Part[]
  assets         Asset[]
  meters         Meter[]
  procedures     Procedure[]
  categories     Category[]
  workOrders     WorkOrder[]
  purchaseOrders PurchaseOrder[]
  automations    Automation[]
  inventory      InventoryLevel[]
  attachments    Attachment[]
  auditLogs      AuditLog[]

  @@map("organizations")
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  fullName       String   @map("full_name") @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  phoneNumber    String?  @map("phone_number") @db.VarChar(50)
  role           UserRole
  passwordHash   String?  @map("password_hash") @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  attachments       Attachment[]       @relation("AttachmentUploadedBy")
  auditLogs         AuditLog[]         @relation("AuditLogActor")
  workOrderComments WorkOrderComment[] @relation("WorkOrderCommentAuthor")

  @@map("users")
}

model Team {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String   @map("organization_id") @db.Uuid
  name             String   @db.VarChar(255)
  description      String?
  color            String?  @db.VarChar(7)
  isEscalationTeam Boolean  @default(false) @map("is_escalation_team")
  criticalParts    Boolean  @default(false) @map("critical_parts")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teamMembers  TeamMember[] @relation("TeamMembers")

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId    String   @map("team_id") @db.Uuid
  users     String[] @map("users") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  team Team @relation("TeamMembers", fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model Vendor {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  name           String   @db.VarChar(255)
  pictureUrl     String?  @map("picture_url")
  color          String?  @db.VarChar(7)
  description    String?
  contacts       Json?
  files          String[] @default([]) @db.Text
  vendorType     String?  @map("vendor_type") @db.VarChar(100)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]
  assets         Asset[]

  @@map("vendors")
}

model Location {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String   @map("organization_id") @db.Uuid
  name             String   @db.VarChar(255)
  photoUrls        String[] @default([]) @map("photo_urls") @db.Text
  address          String?
  description      String?
  teamsInCharge    String[] @default([]) @map("teams_in_charge") @db.Uuid
  files            String[] @default([]) @db.Text
  vendorIds        String[] @default([]) @map("vendor_ids") @db.Uuid
  parentLocationId String?  @map("parent_location_id") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent       Location?        @relation("LocationToLocation", fields: [parentLocationId], references: [id])
  children     Location[]       @relation("LocationToLocation")
  assets       Asset[]
  meters       Meter[]
  workOrders   WorkOrder[]
  inventory    InventoryLevel[]

  @@map("locations")
}

model Part {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  name           String   @db.VarChar(255)
  photos         String[] @default([]) @db.Text
  unitCost       Float?   @map("unit_cost") @db.DoublePrecision
  description    String?
  qrCode         String?  @unique @map("qr_code") @db.VarChar(255)
  partsType      String[] @default([]) @map("parts_type") @db.Text
  location       Json?
  assetIds       String[] @default([]) @map("asset_ids") @db.Uuid
  teamsInCharge  String[] @default([]) @map("teams_in_charge") @db.Uuid
  vendorIds      String[] @default([]) @map("vendor_ids") @db.Uuid
  files          String[] @default([]) @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inventory    InventoryLevel[]

  @@map("parts")
}

model Asset {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId  String            @map("organization_id") @db.Uuid
  name            String            @db.VarChar(255)
  description     String?
  pictures        String[]          @default([]) @db.Text
  files           String[]          @default([]) @db.Text
  locationId      String?           @map("location_id") @db.Uuid
  criticality     AssetCriticality?
  year            Int?
  warrantyDate    DateTime?         @map("warranty_date") @db.Date
  isUnderWarranty Boolean?          @map("is_under_warranty")
  isUnderAmc      Boolean?          @map("is_under_amc")
  manufacturer    String?
  model           String?
  serialNumber    String?           @map("serial_number")
  teamsInCharge   String[]          @default([]) @map("teams_in_charge") @db.Uuid
  qrCode          String?           @unique @map("qr_code")
  assetTypeId     String?           @map("asset_type_id")
  vendorId        String?           @map("vendor_id") @db.Uuid
  partIds         String[]          @default([]) @map("part_ids") @db.Uuid
  parentAssetId   String?           @map("parent_asset_id") @db.Uuid
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location     Location?    @relation(fields: [locationId], references: [id], onDelete: SetNull)
  parent       Asset?       @relation("AssetHierarchy", fields: [parentAssetId], references: [id])
  children     Asset[]      @relation("AssetHierarchy")
  vendor       Vendor?      @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  meters       Meter[]

  @@map("assets")
}

model Meter {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String     @map("organization_id") @db.Uuid
  name             String     @db.VarChar(255)
  meterType        MeterType? @map("meter_type")
  description      String?
  unit             String?    @db.VarChar(50)
  assetId          String?    @map("asset_id") @db.Uuid
  locationId       String?    @map("location_id") @db.Uuid
  readingFrequency Json?      @map("reading_frequency")
  photos           String[]   @default([]) @db.Text
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  asset        Asset?       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  location     Location?    @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("meters")
}

model Procedure {
  id             String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String              @map("organization_id") @db.Uuid
  title          String              @db.VarChar(255)
  assetIds       String[]            @default([]) @map("asset_ids") @db.Uuid
  type           ProcedureType?
  frequency      ProcedureFrequency?
  description    String?
  files          String[]            @default([]) @db.Text
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("procedures")
}

model Category {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String        @map("organization_id") @db.Uuid
  name           String        @db.VarChar(255)
  categoryIcon   CategoryIcon? @map("category_icon")
  description    String?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("category")
}

model WorkOrder {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId     String             @map("organization_id") @db.Uuid
  title              String             @db.VarChar(255)
  status             String?
  pictures           String[]           @default([]) @db.Text
  description        String?
  locationId         String?            @map("location_id") @db.Uuid
  assetIds           String[]           @default([]) @map("asset_ids") @db.Uuid
  procedureIds       String[]           @default([]) @map("procedure_ids") @db.Uuid
  assigneeIds        String[]           @default([]) @map("assignee_ids") @db.Uuid
  estimatedTimeHours Float?             @map("estimated_time_hours") @db.DoublePrecision
  dueDate            DateTime?          @map("due_date") @db.Date
  startDate          DateTime?          @map("start_date") @db.Date
  recurrenceRule     String?            @map("recurrence_rule")
  workType           String?            @map("work_type") @db.VarChar(100)
  priority           WorkOrderPriority?
  files              String[]           @default([]) @db.Text
  partIds            String[]           @default([]) @map("part_ids") @db.Uuid
  categoryIds        String[]           @default([]) @map("category_ids") @db.Uuid
  vendorIds          String[]           @default([]) @map("vendor_ids") @db.Uuid
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at")

  organization Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location     Location?          @relation(fields: [locationId], references: [id], onDelete: SetNull)
  comments     WorkOrderComment[]

  @@map("work_orders")
}

model WorkOrderComment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workOrderId String   @map("work_order_id") @db.Uuid
  authorId    String?  @map("author_id") @db.Uuid
  message     String
  createdAt   DateTime @default(now()) @map("created_at")

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  author    User?     @relation("WorkOrderCommentAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@map("work_order_comments")
}

model PurchaseOrder {
  id              String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId  String               @map("organization_id") @db.Uuid
  vendorId        String               @map("vendor_id") @db.Uuid
  status          PurchaseOrderStatus?
  items           Json
  taxesAndCosts   Json?                @map("taxes_and_costs")
  shippingAddress String?              @map("shipping_address")
  billingAddress  String?              @map("billing_address")
  shippingContact Json?                @map("shipping_contact")
  dueDate         DateTime?            @map("due_date") @db.Date
  notes           String?
  files           String[]             @default([]) @db.Text
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vendor       Vendor       @relation(fields: [vendorId], references: [id], onDelete: Restrict)

  @@map("purchase_orders")
}

model Automation {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  name           String   @db.VarChar(255)
  description    String?
  isEnabled      Boolean  @default(true) @map("is_enabled")
  triggers       Json?
  conditions     Json?
  actions        Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("automations")
}

model InventoryLevel {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  partId         String   @map("part_id") @db.Uuid
  locationId     String?  @map("location_id") @db.Uuid
  quantity       Int      @default(0)
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  part         Part         @relation(fields: [partId], references: [id], onDelete: Cascade)
  location     Location?    @relation(fields: [locationId], references: [id], onDelete: SetNull)

  @@unique([organizationId, partId, locationId])
  @@map("inventory_levels")
}

model Attachment {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String?  @map("organization_id") @db.Uuid
  fileName       String   @map("file_name")
  fileUrl        String   @map("file_url")
  uploadedBy     String?  @map("uploaded_by") @db.Uuid
  category       String?  @db.VarChar(100)
  createdAt      DateTime @default(now()) @map("created_at")

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader     User?         @relation("AttachmentUploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@map("attachments")
}

model AuditLog {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  actorId        String?  @map("actor_id") @db.Uuid
  action         String   @db.VarChar(100)
  targetType     String   @map("target_type") @db.VarChar(100)
  targetId       String?  @map("target_id") @db.Uuid
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actor        User?        @relation("AuditLogActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
